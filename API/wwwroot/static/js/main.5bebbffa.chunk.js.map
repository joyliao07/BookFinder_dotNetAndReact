{"version":3,"sources":["api/shelfAgent.ts","stores/bookStore.ts","stores/userStore.ts","stores/store.ts","stores/modalStore.ts","layout/NavBar.tsx","layout/LoadingComponent.tsx","features/bookshelf/ShelfItem.tsx","features/bookshelf/ShelfList.tsx","features/bookshelf/ShelfDashboard.tsx","features/form/common/TextInput.tsx","features/users/LoginForm.tsx","features/users/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/bookshelf/ShelfBookDetails.tsx","features/form/common/SelectInput.tsx","features/form/common/DateInput.tsx","features/form/common/NoteInput.tsx","features/form/BookForm.tsx","features/search/SearchTextInput.tsx","features/search/SearchEngine.tsx","features/search/SearchDetails.tsx","features/search/SearchResults.tsx","modals/ModalContainer.tsx","layout/PrivateRoute.tsx","errors/NotFound.tsx","errors/ServerError.tsx","layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","store","userStore","headers","Authorization","response","a","error","data","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","bookStore","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","shelfAgent","Books","list","details","id","create","book","update","put","delete","search","keyword","Account","current","login","user","register","BookStore","bookRegistry","Map","selectedBookFromShelf","undefined","selectedBookToAdd","searchedBooks","editMode","loading","loadingInitial","setBookToRegistry","date","Date","set","setLoadingInitial","state","loadBooksFromShelf","forEach","console","log","loadBookFromShelf","runInAction","updateBookFromShelf","deleteBook","searchBooks","keyWord","formattedbooks","results","formatSearchResults","items","loadSearchedBookToForm","bookTitle","bookSubtitle","author","thumbnail","notes","bookUrl","userName","favorite","searchResult","formattedBooks","bookInfo","volumeInfo","authors","imageLinks","identifierType","identifier","industryIdentifiers","type","category","categories","buyLink","saleInfo","title","subtitle","selfLink","publishedDate","publisher","description","averageRating","ratingsCount","pageCount","industryIdentifiersType","industryIdentifier","addBookToShelf","makeAutoObservable","this","Array","from","values","sort","b","Object","entries","booksByStatus","reduce","books","UserStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","credentials","modalStore","closeModal","logout","removeItem","getUser","reaction","setItem","modal","open","openModal","content","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","color","position","Dropdown","pointing","text","displayName","icon","onClick","LoadingComponent","Dimmer","active","Loader","ShelfItem","Segment","Group","Image","size","Content","Header","Link","Description","Icon","format","secondary","clearing","floated","groupedBooks","length","map","group","sub","marginLeft","useEffect","Grid","Column","width","TextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","initialValues","email","password","onSubmit","setErrors","catch","handleSubmit","isSubmitting","className","autoComplete","textAlign","placeholder","render","marginBottom","fluid","ValidationErrors","Message","List","err","i","username","validationSchema","Yup","required","isValid","dirty","disabled","vertical","isLoggedIn","useParams","Card","Meta","MySelectInput","helpers","Select","clearable","options","value","onChange","e","d","setValue","onBlur","setTouched","MyDateInput","selected","NoteInput","useHistory","useState","setBook","nullable","favoriteOptions","statusOptions","enableReinitialize","newBook","uuid","handleFormSubmit","placeholderText","dateFormat","rows","SearchTextInput","SearchEngine","redirect","setRedirect","handleSearch","searchWord","marginTop","positive","SearchDetails","href","target","rel","find","handleSeeBookDetails","Modal","onClose","PrivateRoute","Component","component","rest","NotFound","Inline","message","location","useLocation","finally","path","HomePage","ShelfDashboard","ShelfBookDetails","SearchResults","BookForm","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5bebbffa.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\nimport ShelvedBook from '../models/shelvedBook';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\nimport { history } from '..';\nimport { toast } from 'react-toastify';\n\n// const sleep = (delay: number) => {\n//     return new Promise((resolve) => {\n//         setTimeout(resolve, delay)\n//     })\n// }\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.userStore.token;\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\naxios.interceptors.response.use(async response => {\n    // await sleep(2500);\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.bookStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Books = {\n    list: () => requests.get<ShelvedBook[]>('/books'),\n    details: (id: string) => requests.get<ShelvedBook>(`/books/${id}`),\n    create: (book: ShelvedBook) => axios.post<void>('/books', book),\n    update: (book: ShelvedBook) => axios.put<void>(`/books/${book.id}`, book),\n    delete: (id: string) => axios.delete<void>(`/books/${id}`),\n    search: (keyword: string) => axios.get(`/search/${keyword}`)\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst shelfAgent = {\n    Books,\n    Account\n}\n\nexport default shelfAgent;\n","import { makeAutoObservable, runInAction } from \"mobx\";\nimport shelfAgent from \"../api/shelfAgent\";\nimport ShelvedBook from \"../models/shelvedBook\";\nimport SearchedBook from \"../models/searchedBook\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class BookStore {\n    bookRegistry = new Map<string, ShelvedBook>();\n    selectedBookFromShelf: ShelvedBook | undefined = undefined;\n    selectedBookToAdd: SearchedBook | undefined = undefined;\n    searchedBooks: SearchedBook[] | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = true;\n    error: ServerError | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    // Group books by status:\n    get booksByStatus() {\n        return Array.from(this.bookRegistry.values())\n                    .sort((a: any, b: any) => a.status - b.status);\n    }\n\n    get groupedBooks() {\n        return Object.entries(\n            this.booksByStatus.reduce((books, book) => {\n                const status = book.status;\n                books[status] = books[status] ? [...books[status], book] : [book];\n                return books;\n            }, {} as {[key: string]: ShelvedBook[]})\n        )\n    }\n\n    private setBookToRegistry = (book: ShelvedBook) => {\n        book.date = new Date(book.date);\n        this.bookRegistry.set(book.id, book);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    loadBooksFromShelf = async () => {\n        this.loadingInitial = true;\n        try {\n            const books = await shelfAgent.Books.list();\n            books.forEach(book => {\n                this.setBookToRegistry(book);\n            })\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error); \n            this.setLoadingInitial(false);\n        }\n    }\n\n    loadBookFromShelf = async (id: string) => {\n        this.selectedBookToAdd = undefined;\n        let book = this.bookRegistry.get(id);\n        if (book) {\n            this.selectedBookFromShelf = book;\n            return book;\n        } else {\n            this.loadingInitial = true;\n            try {\n                book = await shelfAgent.Books.details(id);\n                this.setBookToRegistry(book);\n                runInAction(() => {\n                    this.selectedBookFromShelf = book;\n                })\n                this.setLoadingInitial(false);\n                return book;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    updateBookFromShelf = async (book: ShelvedBook) => {\n        this.loading = true;\n        try {\n            await shelfAgent.Books.update(book);\n            runInAction(() => {\n                this.bookRegistry.set(book.id, book);\n                this.selectedBookFromShelf = book;\n                this.editMode = false;\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    deleteBook = async (id: string) => {\n        this.loading = true;\n        try {\n            await shelfAgent.Books.delete(id);\n            runInAction(() => {\n                this.bookRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    // Search with keyword:\n    searchBooks = async (keyWord: string) => {\n        var formattedbooks = [];\n        this.loadingInitial = true;\n        try {\n            var results = await shelfAgent.Books.search(keyWord);\n            runInAction(() => {\n                formattedbooks = this.formatSearchResults(results.data.items);\n                this.searchedBooks = formattedbooks;\n                this.loadingInitial = false;\n            })\n        } catch (error) {\n            console.log(error); \n            this.loadingInitial =false;\n        }\n        return formattedbooks;\n    }\n\n    loadSearchedBookToForm = () => {\n        var book: ShelvedBook = {\n            id: '',\n            bookTitle: this.selectedBookToAdd.bookTitle,\n            bookSubtitle: this.selectedBookToAdd.bookSubtitle,\n            author: this.selectedBookToAdd.author,\n            thumbnail: this.selectedBookToAdd.thumbnail,\n            notes: '',\n            bookUrl: this.selectedBookToAdd.bookUrl,\n            date: new Date(),\n            userName: 'joyce',\n            status: 'To Read',\n            favorite: false\n        };\n        return book;\n    }\n\n    // Format response into SearchedBook[]:\n    private formatSearchResults = (searchResult) => {\n        var formattedBooks: SearchedBook[] = [];\n        for (var bookInfo in searchResult) {\n            var author: string = '';\n            if (searchResult[bookInfo].volumeInfo.hasOwnProperty('authors')) {\n                author = searchResult[bookInfo].volumeInfo.authors[0];\n            }\n            var thumbnail: string = '';\n            if (searchResult[bookInfo].volumeInfo.hasOwnProperty('imageLinks')) {\n                if (searchResult[bookInfo].volumeInfo.imageLinks.hasOwnProperty('thumbnail')) {\n                    thumbnail = searchResult[bookInfo].volumeInfo.imageLinks.thumbnail;\n                }\n            }\n            var identifierType: string = '';\n            var identifier: string = '';\n            if (searchResult[bookInfo].volumeInfo.hasOwnProperty('industryIdentifiers')) {\n                if (searchResult[bookInfo].volumeInfo.industryIdentifiers[0].hasOwnProperty('type')) {\n                    identifierType = searchResult[bookInfo].volumeInfo.industryIdentifiers[0].type;\n                }\n                if (searchResult[bookInfo].volumeInfo.industryIdentifiers[0].hasOwnProperty('identifier')) {\n                    identifier = searchResult[bookInfo].volumeInfo.industryIdentifiers[0].identifier;\n                }\n            }\n            var category: string = '';\n            if (searchResult[bookInfo].volumeInfo.hasOwnProperty('categories')) {\n                category = searchResult[bookInfo].volumeInfo.categories[0];\n            }\n            var buyLink: string = '';\n            if (searchResult[bookInfo].hasOwnProperty('saleInfo')) {\n                if (searchResult[bookInfo].saleInfo.hasOwnProperty('buyLink')) {\n                    buyLink = searchResult[bookInfo].saleInfo.buyLink;\n                }\n            }\n            var book: SearchedBook = {\n                id: searchResult[bookInfo].id,\n                bookTitle: searchResult[bookInfo].volumeInfo.title,\n                bookSubtitle: searchResult[bookInfo].volumeInfo.subtitle,\n                author: author,\n                thumbnail: thumbnail,\n                bookUrl: searchResult[bookInfo].selfLink,\n                publishedDate: searchResult[bookInfo].volumeInfo.publishedDate,\n                publisher: searchResult[bookInfo].volumeInfo.publisher,\n                category: category, \n                description: searchResult[bookInfo].volumeInfo.description,\n                averageRating: searchResult[bookInfo].volumeInfo.averageRating,\n                ratingsCount: searchResult[bookInfo].volumeInfo.ratingsCount,\n                pageCount: searchResult[bookInfo].volumeInfo.pageCount,\n                industryIdentifiersType: identifierType,\n                industryIdentifier: identifier,\n                buyLink: buyLink\n            }\n            formattedBooks.push(book);\n        }\n        return formattedBooks;\n    }\n\n    addBookToShelf = async (book: ShelvedBook) => {\n        this.loading = true;\n        try {\n            await shelfAgent.Books.create(book);\n            runInAction(() => {\n                this.bookRegistry.set(book.id, book);\n                this.selectedBookFromShelf = book;\n                this.editMode = false;\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n    \n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { history } from \"..\";\nimport shelfAgent from \"../api/shelfAgent\";\nimport ShelvedBook from \"../models/shelvedBook\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\n\nexport default class UserStore {\n    user: User | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    get isLoggedIn () {\n        return !!this.user;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n\n    login = async (credentials: UserFormValues)  => {\n        try {\n            const user = await shelfAgent.Account.login(credentials);\n            this.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/books');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        this.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        store.bookStore.bookRegistry = new Map<string, ShelvedBook>();\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await shelfAgent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (credentials: UserFormValues)  => {\n        try {\n            const user = await shelfAgent.Account.register(credentials);\n            this.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/books');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import { createContext, useContext } from \"react\";\nimport BookStore from \"./bookStore\";\nimport ModalStore from \"./modalStore\";\nimport UserStore from \"./userStore\";\n\n\ninterface Store {\n    bookStore: BookStore,\n    userStore: UserStore,\n    modalStore: ModalStore,\n}\n\nexport const store: Store = {\n    bookStore: new BookStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}\n","import { makeAutoObservable } from \"mobx\";\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { observer } from 'mobx-react-lite';\nimport { NavLink } from 'react-router-dom';\nimport { Button, Container, Dropdown, Menu } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nvar NavBar = () => {\n    const {userStore} = useStore();\n\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} exact to='/' header>\n                    <img src='/read.png' alt='logo' style={{ marginRight: '10px' }} />\n                    BookFinder\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/books' name='Bookshelf'/>\n                <Menu.Item>\n                    <Button as={NavLink} to='/search' color='teal' content='Search Books' />\n                </Menu.Item>\n                {(userStore.user) &&\n                    <Menu.Item position='right'>\n                        <Dropdown pointing='top left' text={`Wecome ${userStore.user?.displayName}`}>\n                            <Dropdown.Menu>\n                                <Dropdown.Item as={NavLink} to='/books' text='My Bookshelf'  icon='book'/>\n                                <Dropdown.Item as={NavLink} to='/search' text='Find Books'  icon='search'/>\n                                <Dropdown.Item onClick={userStore.logout} text='Logout'  icon='power'/>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>}\n            </Container>\n        </Menu>\n    );\n}\n\nexport default observer(NavBar);\n","import { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading App...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Segment } from 'semantic-ui-react';\nimport ShelvedBook from '../../models/shelvedBook';\nimport { useStore } from '../../stores/store';\n\ninterface Props {\n    book: ShelvedBook\n}\n\nconst ShelfItem = ({ book }: Props) => {\n    const {bookStore} = useStore();\n    const {deleteBook} = bookStore;\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' src={book.thumbnail} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/books/${book.id}`}>\n                                {book.bookTitle}\n                            </Item.Header>\n                            {(book.author !== \"\") &&\n                            <Item.Description>By {book.author}</Item.Description>}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                {(book.favorite) && \n                    <>\n                        <Icon name='favorite'/>Favorite\n                    </>}\n                {(!book.favorite) && \n                    <>\n                        <Icon name='dont'/>Not favorite\n                    </>}\n            </Segment>\n            <Segment>\n                <Icon name='calendar'/>Last updated on {format(book.date, 'MMM dd, yyyy')}\n            </Segment>\n            <Segment secondary>\n                <Icon name='book'/>{book.status}\n            </Segment>\n            <Segment clearing>\n                <Button \n                    as={Link}\n                    to={`/books/${book.id}`}\n                    color='olive'\n                    floated='right'\n                    content='View Details'/>\n                <Button \n                    color='orange'\n                    floated='right'\n                    content='Delete'\n                    onClick={() => deleteBook(book.id)}/>\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default ShelfItem;\n","import { observer } from \"mobx-react-lite\";\nimport { Fragment } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Button, Header, Icon } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\nimport ShelfItem from \"./ShelfItem\";\n\n\nconst ShelfList = () => {\n    const { bookStore } = useStore();\n    const { groupedBooks } = bookStore;\n\n    return(\n        <>\n        {(groupedBooks.length > 0) && groupedBooks.map(([group, books]) => (\n            <Fragment key={group}>\n                <Header sub color='blue'>\n                    {group}\n                </Header>\n                {books.map(book => (\n                    <ShelfItem key={book.id} book={book} />\n                ))}\n            </Fragment>\n        ))}\n        {(groupedBooks.length === 0) && \n            <>\n                <Header as='h2' color='blue'>\n                    There is no book on your bookshelf.\n                </Header>\n                <Icon name='hand point right outline' size='large' style={{marginLeft: '10%'}}/>\n                <Button as={NavLink} to='/search' color='teal' content='Search Books' />\n            </>\n        }\n    </>\n    )\n}\n\nexport default observer(ShelfList);\n","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../layout/LoadingComponent\";\nimport { useStore } from \"../../stores/store\";\nimport ShelfList from \"./ShelfList\";\n\n\nvar ShelfDashboard = () => {\n    const {bookStore} = useStore();\n    const {loadBooksFromShelf, bookRegistry} = bookStore;\n\n    useEffect(() => {\n      if (bookRegistry.size <= 1) loadBooksFromShelf();\n    }, [bookRegistry.size, loadBooksFromShelf])\n  \n    if (bookStore.loadingInitial) return <LoadingComponent content='Loading bookshelf' />\n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n                <ShelfList/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ShelfDashboard);\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\n function TextInput(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default TextInput;\n","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\nimport TextInput from \"../form/common/TextInput\";\n\nconst LoginForm = () => {\n    const {userStore} = useStore();\n\n    return(\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch( error =>\n                setErrors({error: 'Invalid email or password'}))}>\n                {({handleSubmit, isSubmitting, errors}) => (\n                    <Form   className='ui form' \n                            onSubmit={handleSubmit}\n                            autoComplete='off'>\n                        <Header as='h2' color='teal'\n                                content='Login' \n                                textAlign='center'/>\n                        <TextInput name='email' placeholder='Email'/>\n                        <TextInput name='password' placeholder='Password' type='password'/>\n                        <ErrorMessage \n                            name='error' render={() =>\n                            <Label style={{marginBottom: 12}} basic color='red' content={errors.error}/>} />\n                        <Button loading={isSubmitting} color='teal' content='Login' type='submit' fluid/>\n                    </Form>\n                )}\n        </Formik>\n    )\n}\n\nexport default observer(LoginForm);\n","import { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}\n","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Header, Button } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\nimport TextInput from \"../form/common/TextInput\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"./ValidationErrors\";\n\nconst RegisterForm = () => {\n    const {userStore} = useStore();\n\n    return(\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch( error => \n                setErrors({error})\n            )}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}>\n                {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                    <Form   className='ui form error' \n                            onSubmit={handleSubmit}\n                            autoComplete='off'>\n                        <Header as='h2' color='teal' textAlign='center'\n                                content='Sign up to BookFinder' />\n                        <TextInput name='displayName' placeholder='Display Name'/>\n                        <TextInput name='username' placeholder='Username'/>\n                        <TextInput name='email' placeholder='Email'/>\n                        <TextInput name='password' placeholder='Password' type='password'/>\n                        <ErrorMessage   name='error' \n                                        render={() => <ValidationErrors errors={errors.error}/>}\n                        />\n                        <Button disabled={!isValid || !dirty || isSubmitting} \n                                loading={isSubmitting} color='teal' content='Register' type='submit' fluid/>\n                    </Form>\n                )}\n        </Formik>\n    )\n}\n\nexport default observer(RegisterForm);","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nconst HomePage = () => {\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/read.png' alt='logo' style={{marginBottom: 12}} />\n                    BookFinder\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                    <div style={{marginBottom: 30}}>\n                        <h1 style={{marginBottom: 25}}>Welcome back, {userStore.user.displayName}! </h1>\n                        <Button as={Link} to='/books' size='huge' inverted>\n                            Go to Bookshelf!\n                        </Button>\n                    </div>\n                        <Button onClick={userStore.logout} size='medium' inverted>\n                            Logout\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button size='huge' inverted\n                            onClick={() => modalStore.openModal(<LoginForm />)}>\n                            Login\n                        </Button>\n                        <Button size='huge' inverted\n                            onClick={() => modalStore.openModal(<RegisterForm />)}>\n                            Register\n                        </Button>\n                    </>\n                )}\n                \n            </Container>\n        </Segment>\n    )\n}\n\nexport default observer(HomePage);\n","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Button, Card, Icon, Image, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../layout/LoadingComponent\";\nimport { useStore } from \"../../stores/store\";\nimport { format } from 'date-fns';\n\n\nconst ShelfBookDetails = () => {\n    const {bookStore} = useStore();\n    const {selectedBookFromShelf: book, loadBookFromShelf, loadingInitial} = bookStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadBookFromShelf(id);\n    }, [id, loadBookFromShelf]);\n\n    if (loadingInitial || !book) return <LoadingComponent />;\n\n    return(\n        <Card fluid>\n            <Card.Content>\n                <Image\n                    src={book.thumbnail}\n                    size='small' floated='left'/>\n                <Card.Header>{book.bookTitle}</Card.Header>\n                <Card.Meta>{book.bookSubtitle}</Card.Meta>\n                {(book.author !== '') && <p>By {book.author}</p>}\n            </Card.Content>\n            <Card.Content>\n                <Card.Description>\n                    {(book.favorite) && \n                        <><Icon name='favorite'/>Favorite</>\n                    }\n                    {(!book.favorite) && \n                        <><Icon name='dont'/>Not favorite</>\n                    }\n                </Card.Description>\n            </Card.Content>\n            <Card.Content>\n                <Card.Description>\n                    <Icon name='calendar'/>Last updated on {format(book.date, 'MMM dd, yyyy')}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content>\n                <Card.Description>\n                    <Icon name='book'/> {book.status}\n                </Card.Description>\n                <Segment>\n                    <h4>Notes:</h4>\n                    <p>{book.notes}</p>\n                    {(book.notes === '') && \n                        <p>(Currently no notes for this book)</p>\n                    }\n                </Segment>\n                \n                <Button as={Link} to={`/manage/${book.id}`} color='olive' floated='right'>\n                    Edit Book Status\n                </Button>\n                <Button as={Link} to={`/books`} color='grey' floated='right'>\n                    Cancel\n                </Button>\n            </Card.Content>\n        </Card>\n    )\n}\n\nexport default observer(ShelfBookDetails);\n\n","import { useField } from 'formik';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name); \n    \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={date => helpers.setValue(date)}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\n const NoteInput = (props: Props) => {\n    const [field, meta] = useField(props.name); \n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>Notes: </label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default NoteInput;\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { Button, Card, Header, Segment } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport LoadingComponent from '../../layout/LoadingComponent';\nimport ShelvedBook from '../../models/shelvedBook';\nimport { useStore } from '../../stores/store';\nimport * as Yup from 'yup';\nimport { Formik, Form } from 'formik';\nimport SelectInput from './common/SelectInput';\nimport DateInput from './common/DateInput';\nimport NoteInput from './common/NoteInput';\n\nconst BookForm = () => {\n    const history = useHistory();\n    const {bookStore, modalStore} = useStore();\n    const {addBookToShelf, updateBookFromShelf, \n            loading, loadBookFromShelf, selectedBookToAdd, loadSearchedBookToForm, loadingInitial} = bookStore;\n    const {id} = useParams<{id: string}>();\n\n    const [book, setBook] = useState<ShelvedBook>({\n        id: '',\n        bookTitle: '',\n        bookSubtitle: '',\n        author: '',\n        thumbnail: '',\n        notes: '',\n        bookUrl: '',\n        date: null,\n        userName: '',\n        status: '',\n        favorite: 'Not favorite'\n    });\n\n    const validationSchema = Yup.object({\n        date: Yup.string().required('Date is required').nullable(),\n        status: Yup.string().required('Reading stsatus is required.')\n    })\n\n    useEffect(() => {\n        if (selectedBookToAdd === undefined) {\n            loadBookFromShelf(id).then(book => setBook(book!));\n        } else {\n            modalStore.closeModal();\n            const book = loadSearchedBookToForm();\n            setBook(book);\n        }\n    }, [id, loadBookFromShelf, selectedBookToAdd, loadSearchedBookToForm, modalStore]);\n\n    function handleFormSubmit(book: ShelvedBook) {\n        if (book.favorite === 'Favorite') {\n            book.favorite = true;\n        } else {\n            book.favorite = false;\n        }\n        if (book.id.length === 0) {\n            let newBook = {\n                ...book,\n                id: uuid()\n            };\n            addBookToShelf(newBook).then(() => history.push(`/books/${newBook.id}`))\n        } else {\n            updateBookFromShelf(book).then(() => history.push(`/books/${book.id}`))\n        }\n    }\n\n    const favoriteOptions = [\n        {text: 'Favorite', value: 'Favorite'},\n        {text: 'Not Favorite', value: 'Not favorite'}\n    ]\n\n    const statusOptions = [\n        {text: 'To Read', value: 'To Read' },\n        {text: 'Reading Now', value: 'Reading Now'},\n        {text: 'Done Reading', value: 'Done Reading'}\n    ]\n\n    if (loadingInitial) return <LoadingComponent content='Loading book...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Book Details' sub color='blue' />\n            <Card fluid>\n                <Card.Content>\n                    <Card.Header>{book.bookTitle}</Card.Header>\n                    <p>{book.bookSubtitle}</p>\n                    <Card.Description>\n                        By {book.author}\n                    </Card.Description>\n                </Card.Content>\n            \n                <Card.Content>\n                <Formik \n                    validationSchema={validationSchema}\n                    enableReinitialize \n                    initialValues={book} \n                    onSubmit={values => handleFormSubmit(values)}>\n                        \n                    {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                            <SelectInput \n                                options={favoriteOptions} \n                                placeholder='Favorite' \n                                name='favorite'/>\n                            <DateInput \n                                placeholderText='Date'  \n                                name='date' \n                                dateFormat='MMMM d, yyyy'/>\n                            <SelectInput \n                                options={statusOptions} \n                                placeholder='Status'  \n                                name='status'/>\n                            <NoteInput \n                                rows={3} \n                                placeholder='My notes' \n                                name='notes' />\n                            <Button \n                                disabled={isSubmitting || !isValid}\n                                loading={loading} floated='right' \n                                color='olive' type='submit' content='Save' />\n                            <Button as={Link} to='/books' floated='right' type='button' content='Cancel' />\n                        </Form>\n                    )}\n\n                </Formik>\n                </Card.Content> \n            </Card>\n\n        </Segment>\n    )\n}\n\nexport default observer(BookForm);\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n}\n\nexport default function SearchTextInput(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { useState } from 'react';\nimport { Button, Container } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport SearchTextInput from './SearchTextInput';\nimport { Redirect } from 'react-router-dom';\nimport { useStore } from '../../stores/store';\n\nfunction SearchEngine() {\n  const [redirect, setRedirect] = useState(null);\n  const {bookStore} = useStore();\n\n  const validationSchema = Yup.object({\n    keyWord: Yup.string().required('Enter keyword to search.').nullable(),\n  })\n\n  const handleSearch = async (searchWord) => {\n    bookStore.loadingInitial = true;\n    setRedirect(searchWord.keyWord);\n  }\n\n  if (redirect) {\n    return <Redirect to={`/search/${redirect}`}/>\n  }\n\n  return (\n    <>\n      <Container style={{marginTop: '7em'}}>\n        <h3>Search Book</h3>\n        <Formik \n          validationSchema={validationSchema}\n          enableReinitialize \n          initialValues={{keyWord: ''}} \n          onSubmit={keyWord => handleSearch(keyWord)}>\n          {({ handleSubmit, isValid }) => (\n              <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                  <SearchTextInput name='keyWord' placeholder='Search Word'/>\n                  <Button \n                      disabled={!isValid}\n                      floated='right' \n                      positive type='submit' content='Search' />\n              </Form>\n          )}\n        </Formik>\n      </Container>\n    </>\n  );\n}\n\nexport default SearchEngine;\n","import { Link } from \"react-router-dom\";\nimport { Button, Card, Image, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\n\nconst SearchDetails = () => {\n    const {bookStore} = useStore();\n    const {selectedBookToAdd: book} = bookStore;\n\n    return(\n        <Card fluid>\n            <Card.Content>\n                <div style={{'height': '140px'}}>\n                    <Image\n                        src={book.thumbnail}\n                        size='tiny'\n                        floated='left'/>\n                    <h3>{book.bookTitle}</h3>\n                    <Card.Meta>{book.bookSubtitle}</Card.Meta>\n                    {(book.author !== '') && <p>By {book.author}</p>}\n                    {(book.publisher !== '') && <p>Publisher: {book.publisher}</p>}\n                    {(book.publishedDate !== '') && <p>Publish date: {book.publishedDate}</p>}\n                </div>\n                {(book.category !== '') && \n                    <Segment.Group>\n                        <Segment>Category: {book.category}</Segment>\n                    </Segment.Group>}\n\n                {(book.description !== undefined) &&\n                    <Segment.Group>\n                            <Segment>Description:</Segment>\n                            <Segment>{book.description}</Segment>\n                    </Segment.Group>}\n                \n                {(book.averageRating !== undefined) &&\n                    <Segment.Group>\n                        <Segment>\n                            <p>Rating: {book.averageRating} out of 5 stars</p>\n                            {(book.ratingsCount !== undefined) && <p>Number of votes: {book.ratingsCount}</p>}\n                        </Segment>\n                    </Segment.Group>}\n\n                <Segment.Group>\n                    {(book.pageCount !== undefined) &&\n                        <Segment>\n                            Page Count: {book.pageCount}\n                        </Segment>}\n                    {(book.industryIdentifier.length > 3) &&\n                        <Segment>\n                            <p>Industry Identifier:</p>\n                            {book.industryIdentifiersType}. {book.industryIdentifier}\n                        </Segment>}\n                    {(book.buyLink !== '') &&\n                        <Segment>\n                            <h5>Purchase Link:</h5> \n                            <a href={book.buyLink} target=\"_blank\" rel=\"noopener noreferrer\">{book.buyLink}</a>\n                        </Segment>}\n                </Segment.Group>\n            </Card.Content>\n            <Button as={Link} to={`/addBook/${book.id}`} color='olive' floated='right'>\n                Add To Bookshelf\n            </Button>\n        </Card>\n    )\n}\n\nexport default SearchDetails;\n","import { useEffect } from 'react';\nimport { Button, Container, Card, Image } from 'semantic-ui-react';\nimport SearchDetails from './SearchDetails';\nimport { useStore } from '../../stores/store';\nimport LoadingComponent from '../../layout/LoadingComponent';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router';\n\nfunction SearchResults() {\n  const {bookStore, modalStore} = useStore();\n  const {searchBooks, searchedBooks, loadingInitial} = bookStore;\n  const {keyWord} = useParams<{keyWord: string}>();\n\n  useEffect(() => {\n    searchBooks(keyWord);\n  }, [searchBooks, keyWord]);\n\n  const handleSeeBookDetails = (id: string) => {\n    const book = searchedBooks.find(a => a.id === id);\n    bookStore.selectedBookToAdd = book;\n    modalStore.openModal(<SearchDetails />)\n  }\n\n  if (loadingInitial) return <LoadingComponent content='Loading search results'/>\n\n  return (\n    <>\n      <Container style={{marginTop: '7em'}}>\n          <h3>Search results</h3>\n          {searchedBooks.map( book => {\n              return(\n                  <Card fluid key={book.id}>\n                    <Card.Content>\n                      <Image src={book.thumbnail} size='tiny' floated='left'/>\n                      <h3>{book.bookTitle}</h3>\n                      <h5>{book.bookSubtitle}</h5>\n                    </Card.Content>\n                    <Card.Content>\n                      {(book.author !== '') && <p>By {book.author}</p>}\n                      {(book.publishedDate !== '') && <p>Publish date: {book.publishedDate}</p>}\n                      <Button color='olive' \n                              floated='right'\n                              onClick={() => handleSeeBookDetails(book.id)}>More Details</Button>\n                    </Card.Content>\n                  </Card>\n              )\n          })}\n      </Container>\n    </>\n  );\n}\n\nexport default observer(SearchResults);\n","import { observer } from \"mobx-react-lite\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\n\nconst ModalContainer = () => {\n    const {modalStore} = useStore();\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='small'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default observer(ModalContainer);\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>  \n}\n\nconst PrivateRoute = ({component: Component, ...rest}: Props) => {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props}/>\n                : <Redirect to='/'/>}\n            />\n    )\n}\n\nexport default PrivateRoute;\n","import { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we cannot find the page...\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/books' color='teal'>\n                    Return to Bookshelf\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\n\nexport default observer(function ServerError() {\n    const {bookStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={bookStore.error?.message} />\n            {bookStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{bookStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})\n","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ShelfDashboard from '../features/bookshelf/ShelfDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../features/home/HomePage';\nimport ShelfBookDetails from '../features/bookshelf/ShelfBookDetails';\nimport BookForm from '../features/form/BookForm';\nimport SearchEngine from '../features/search/SearchEngine';\nimport SearchResults from '../features/search/SearchResults';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../modals/ModalContainer';\nimport PrivateRoute from './PrivateRoute';\nimport NotFound from '../errors/NotFound';\nimport ServerError from '../errors/ServerError';\n\nfunction App() {\n  const location = useLocation();\n  const {userStore} = useStore();\n\n  useEffect(() => {\n    if (userStore.token) {\n      userStore.getUser().finally(() => userStore.setAppLoaded());\n    } else {\n      userStore.setAppLoaded();\n    }\n  }, [userStore]);\n\n  if (!userStore.appLoaded) return <LoadingComponent/>\n  \n  return (\n    <>\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/books' component={ShelfDashboard} />\n                <PrivateRoute path='/books/:id' component={ShelfBookDetails} />\n                <PrivateRoute exact path='/search' component={SearchEngine} />\n                <PrivateRoute path='/search/:keyWord' component={SearchResults} />\n                <Route key={location.key} path={['/addBook/:id', '/manage/:id']} component={BookForm} />\n                <Route component={NotFound} />\n                <Route path='/server-error' component={ServerError} />\n              </Switch>\n            </Container>\n          </>\n        )}/>\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './layout/styles.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './stores/store';\nimport { Router } from 'react-router-dom';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {createBrowserHistory} from 'history';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}